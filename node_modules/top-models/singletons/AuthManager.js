var _ = require('lodash');

var mongoose = require('mongoose'),
    AuthTable = mongoose.model('AuthTable');

function AuthManager() {
    this.init();
};

//role: {type: String, unique: true, required: true},
//authInfo: [
//    {
//        url: {type: String, required: true},
//        method: {type: String, required: true, default: "get"}
//    }
//]

AuthManager.prototype.init = function () {
    var _self = this;
    _self.auths = {};
    _self.db = {};
    AuthTable.find(null, function (err, data) {
        _.forEach(data, function (item) {
            var roleAuth = {};
            _.forEach(item.authInfo, function (item) {
                var method = item.method,
                    url = item.url;
                if (!(method in roleAuth)) {
                    roleAuth[method] = [];
                }
                var methodContainers = roleAuth[method];
                if (!_.contains(methodContainers, url)) {
                    methodContainers.push(url);
                }
            });
            _self.auths[item.role] = roleAuth;
            _self.db[item.role] = {
                item: item,
                changed: false
            };
        });
    });
};


AuthManager.prototype.save = function () {
    var _self = this;
    _.forIn(_self.db, function (v, k) {
        if (v.changed) {
            v.item.save(function (err) {
                v.changed = !!err;
            });
        }
    });
};

AuthManager.prototype.newAuth = function (role, url, method) {
    var _self = this;
    var auths = _self.auths;
    if (role in auths) {
        var roleAuths = auths[role];
        if (method in roleAuths) {
            var index = _.findIndex(roleAuths[method], url);
            if (index < 0) {
                roleAuths[method].push(url);
                _self.db[role].item.authInfo.push({url: url, method: method});
                _self.db[role].changed = true;
            }
        }
        else {
            roleAuths[method] = [url];
            _self.db[role].item.authInfo.push({url: url, method: method});
            _self.db[role].changed = true;
        }
    } else {
        var roleAuth = {};
        roleAuth[method] = [url];
        _self.auths[role] = roleAuth;
        _self.db[role] = {
            item: new AuthTable({
                role: role,
                authInfo: [
                    {
                        url: url,
                        method: method
                    }
                ]
            }),
            changed: true
        };
    }
};

AuthManager.prototype.hasAuth = function (role, url, method) {
    var _self = this,
        auths = _self.auths;
    return role in auths && method in auths[role] && ~(_.findIndex(auths[role][method], url));
};

AuthManager.prototype.delAuth = function (role, url, method) {
    var _self = this;
    var auths = _self.auths;
    if (role in auths) {
        var roleAuths = auths[role];
        if (method in roleAuths) {
            var index = _.findIndex(roleAuths[method], url);
            if (~index) {
                roleAuths[method].splice(index, 1);
                _.remove(_self.db[role].item.authInfo, function (item) {
                    return item.url === url;
                });
                _self.db[role].changed = true;
            }
        }
    }
};

exports = module.exports = new AuthManager();