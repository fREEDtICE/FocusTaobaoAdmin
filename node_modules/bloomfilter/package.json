{
  "name": "bloomfilter",
  "version": "0.0.14",
  "description": "Fast bloom filter in JavaScript.",
  "keywords": [
    "bloom filter",
    "probabilistic data structure"
  ],
  "homepage": "https://github.com/jasondavies/bloomfilter.js",
  "author": {
    "name": "Jason Davies",
    "url": "http://www.jasondavies.com/"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/jasondavies/bloomfilter.js.git"
  },
  "main": "bloomfilter.js",
  "devDependencies": {
    "vows": "0.7.0"
  },
  "scripts": {
    "test": "./node_modules/vows/bin/vows"
  },
  "readme": "Bloom Filter\n============\n\nThis JavaScript bloom filter implementation uses the non-cryptographic\n[Fowler–Noll–Vo hash function][1] for speed.\n\nUsage\n-----\n\n    var bloom = new BloomFilter(\n      32 * 256, // number of bits to allocate.\n      16        // number of hash functions.\n    );\n\n    // Add some elements to the filter.\n    bloom.add(\"foo\");\n    bloom.add(\"bar\");\n\n    // Test if an item is in our filter.\n    // Returns true if an item is probably in the set,\n    // or false if an item is definitely not in the set.\n    bloom.test(\"foo\");\n    bloom.test(\"bar\");\n    bloom.test(\"blah\");\n\n    // Serialisation. Note that bloom.buckets may be a typed array,\n    // so we convert to a normal array first.\n    var array = [].slice.call(bloom.buckets),\n        json = JSON.stringify(array);\n\n    // Deserialisation. Note that the any array-like object is supported, but\n    // this will be used directly, so you may wish to use a typed array for\n    // performance.\n    var bloom = new BloomFilter(array, 3);\n\nImplementation\n--------------\n\nAlthough the bloom filter requires *k* hash functions, we can simulate this\nusing only *two* hash functions.  In fact, we cheat and get the second hash\nfunction almost for free by iterating once more on the first hash using the FNV\nhash algorithm.\n\nThanks to Will Fitzgerald for his [help and inspiration][2] with the hashing\noptimisation.\n\n[1]: http://isthe.com/chongo/tech/comp/fnv/\n[2]: http://willwhim.wordpress.com/2011/09/03/producing-n-hash-functions-by-hashing-only-once/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jasondavies/bloomfilter.js/issues"
  },
  "_id": "bloomfilter@0.0.14",
  "dist": {
    "shasum": "75c71e77eb465d96455495fcd4db5b4c1a8cf89e"
  },
  "_from": "bloomfilter@*",
  "_resolved": "http://r.cnpmjs.org/bloomfilter/download/bloomfilter-0.0.14.tgz"
}
